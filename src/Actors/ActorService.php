<?php
namespace ActivityPub\Actors;

use ActivityPub\Crypto\RsaKeypair;
use ActivityPub\Objects\ObjectService;
use ActivityPub\Utils\Util;
use Doctrine\ORM\EntityManager;

class ActorService
{
    /**
     * @var ObjectService
     */
    private $objectService;

    /**
     * @var EntityManager
     */
    private $entityManager;

    public function __construct( ObjectService $objectService, EntityManager entityManager )
    {
        $this->objectService = $objectService;
        $this->entityManager = $entityManager;
    }

    /**
     * Creates a new Actor object
     *
     * Also creates the actor's collections - inbox, outbox, following,
     *   followers, and liked - and the actor's public/private keypair.
     *   The collections will have ids generated by appending /<collection name>
     *   to the end of the actor's id, e.g. /inbox, /outbox, etc. The public key
     *   will have its id generated by appending #main-key to the end of the actor's
     *   id. The private key will be persisted and associated with the actor object.
     *
     * @param array $fields The actor's fields. The id and type fields are required
     * @return ActivityPubActor The created Actor object
     */
    public function createActor( $fields )
    {
        $requiredFields = array( 'id', 'type' );
        if ( ! Util::arrayKeysExist( $fields, $requiredFields ) ) {
            throw new InvalidArgumentException( 'Actors require id and type fields' );
        }
        $actorId = rtrim( $fields['id'], '/' );
        $keypair = RsaKeypair::generate();
        $publicKeyField = array(
            'id' => "${actorId}#main-key",
            'owner' => $actorId,
            'publicKeyPem' => $keypair->getPublicKey(),
        );
        $fields['publicKey'] = $publicKeyField;
    }

    /**
     * Returns the actor identified by $id
     *
     * @param string $id The actor's id
     * @return ActivityPubActor The actor
     */
    public function getActor( $id )
    {
        
    }

    /**
     * Deletes the actor identified by $id by replacing it with a Tombstone object
     *
     * Also deletes the actor's collections - inbox, outbox, following,
     *   followers, and liked - and the actor's public/private keypair.
     * @param string $id The actor's id
     * @return ActivityPubObject The Tombstone that the actor was replaced with
     */
    public function deleteActor( $id )
    {
        
    }
}
?>
